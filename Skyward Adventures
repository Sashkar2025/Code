/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 */

package com.mycompany.spaceshootergame;

/**
 *
 * @author sashkar2025
 */
import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.awt.geom.Rectangle2D;
import java.util.ArrayList;

// Base class for game objects
abstract class GameObject {
    protected int x, y;
    protected int width, height;

    public GameObject(int x, int y, int width, int height) {
        this.x = x;
        this.y = y;
        this.width = width;
        this.height = height;
    }

    public abstract void draw(Graphics2D g2d);

    public abstract void update();
}

// Inherits from game object
class Spaceship extends GameObject {
    private static final int SPACESHIP_WIDTH = 60;
    private static final int SPACESHIP_HEIGHT = 40;

    public Spaceship(int x, int y) {
        super(x, y, SPACESHIP_WIDTH, SPACESHIP_HEIGHT);
    }

    @Override
    public void draw(Graphics2D g2d) {
        g2d.setColor(Color.BLUE);
        Color myOrange = new Color(255, 130, 0);

        // Define the main body of the spaceship
        int[] xPoints = {x, x + width / 2, x + width, x + width / 3, x + 2 * width / 3};
        int[] yPoints = {y + height, y - height, y + height, y, y};

        // Draw the spaceship body using the polygon method
        g2d.fillPolygon(xPoints, yPoints, 5);

        // Draw the spaceship cockpit (smaller area near the front)
        g2d.setColor(Color.CYAN);
        g2d.fillOval(x + width / 3, y - height / 2, width / 3, height / 2);

        // Add small fins on the back for extra detail (wings)
        g2d.setColor(myOrange);
        g2d.fillPolygon(new int[]{x + width / 3, x + width / 2, x + width / 3},
                        new int[]{y + height, y + height, y + height + 20}, 3);
        g2d.fillPolygon(new int[]{x + 2 * width / 3, x + width / 2, x + 2 * width / 3},
                        new int[]{y + height, y + height, y + height + 20}, 3);
    }

    @Override
    public void update() {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    // Get the bounding box for the spaceship (hitbox)
    public Rectangle getBounds() {
        return new Rectangle(x, y, width, height);
    }
}


class Bullet extends GameObject {
    private static final int BULLET_WIDTH = 3;
    private static final int BULLET_HEIGHT = 12;

    public Bullet(int x, int y) {
        super(x, y, BULLET_WIDTH * 2, BULLET_HEIGHT * 2);
    }

    @Override
    public void draw(Graphics2D g2d) {
        g2d.setColor(Color.RED);
        g2d.fillOval(x, y, width, height);
    }

    @Override
    public void update() {
        y -= 5; // Bullet moves upwards
    }
}

class Asteroid extends GameObject {
    private static final int ASTEROID_RADIUS = 20;
    private int speed;  // Speed of the asteroid

    public Asteroid(int x, int y, int speed) {
        super(x, y, ASTEROID_RADIUS * 2, ASTEROID_RADIUS * 2);
        this.speed = speed;
    }

    @Override
    public void draw(Graphics2D g2d) {
        g2d.setColor(Color.GRAY);
        g2d.fillOval(x, y, width, height);
    }

    @Override
    public void update() {
        y += speed; // Asteroid moves downwards
    }

    public void increaseSpeed(int speedIncrement) {
        this.speed += speedIncrement;
    }

    public int getSpeed() {
        return speed;
    }

    // Get the bounding box for the asteroid (hitbox)
    public Rectangle getBounds() {
        return new Rectangle(x+17, y, 5, 70);
    }
}


public class SpaceShooterGame extends JFrame {
    private static final int WIDTH = 800;
    private static final int HEIGHT = 600;

    private Spaceship spaceship;
    private final ArrayList<Bullet> bullets;
    private final ArrayList<Asteroid> asteroids;
    private final Timer gameTimer;
    private boolean gameOver;
    private int score;
    private int highScore;
    private int level;
    private int destroyedAsteroids;
    private boolean levelUpDisplay;
    private long levelUpTime;

    public SpaceShooterGame() {
        setTitle("Space Shooter Game");
        setSize(WIDTH, HEIGHT);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLocationRelativeTo(null);
        setResizable(false);

        spaceship = new Spaceship(WIDTH / 2 - 25, HEIGHT - 50);
        bullets = new ArrayList<>();
        asteroids = new ArrayList<>();
        gameOver = false;
        score = 0;
        highScore = 0;
        level = 1;
        destroyedAsteroids = 0;
        levelUpDisplay = false;
        levelUpTime = 0;

        addKeyListener(new KeyAdapter() {
            @Override
            public void keyPressed(KeyEvent e) {
                handleKeyPress(e);
            }
        });

        gameTimer = new Timer(16, (ActionEvent e) -> {
            if (!gameOver) {
                updateGame();
                repaint();
            }
        });
        gameTimer.start();
    }

    private void handleKeyPress(KeyEvent e) {
        int keyCode = e.getKeyCode();
        if (keyCode == KeyEvent.VK_LEFT && spaceship.x > 0) {
            spaceship.x -= 10;
        } else if (keyCode == KeyEvent.VK_RIGHT && spaceship.x < WIDTH - spaceship.width) {
            spaceship.x += 10;
        } else if (keyCode == KeyEvent.VK_UP && spaceship.y > 0) {
            spaceship.y -= 10;
        } else if (keyCode == KeyEvent.VK_DOWN && spaceship.y < HEIGHT - spaceship.height) {
            spaceship.y += 10;
        } else if (keyCode == KeyEvent.VK_SPACE) {
            shootBullet();
        } else if (keyCode == KeyEvent.VK_ENTER && gameOver) {
            restartGame();
        }
    }

    private void shootBullet() {
        Bullet bullet = new Bullet(spaceship.x + spaceship.width / 2 - 2 , spaceship.y - 40);
        bullets.add(bullet);
    }

    private void updateGame() {
        // If level up display is active, skip updating game objects (spaceship, asteroids)
        if (levelUpDisplay) {
            // If 3 seconds have passed since the level-up display started, stop the display
            if (System.currentTimeMillis() - levelUpTime > 3000) {
                levelUpDisplay = false; // End the level-up screen
            }
            return;
        }

        ArrayList<Bullet> bulletsToRemove = new ArrayList<>();
        ArrayList<Asteroid> asteroidsToRemove = new ArrayList<>();

        // Update the bullets
        for (Bullet bullet : bullets) {
            bullet.update();
        }

        // Create a new asteroid based on random chance
        if (Math.random() < 0.05) {
            createAsteroid();
        }

        // Update asteroids and check for collisions
        for (Asteroid asteroid : asteroids) {
            asteroid.update();

            // Check if spaceship collided with asteroid
            if (spaceship.getBounds().intersects(asteroid.getBounds())) {
                gameOver = true;
                updateHighScore();
            }   
            
            // Check for bullet-asteroid collisions
            for (Bullet bullet : bullets) {
                if (bullet.x + bullet.width > asteroid.x && bullet.x < asteroid.x + asteroid.width
                        && bullet.y + bullet.height > asteroid.y && bullet.y < asteroid.y + asteroid.height) {
                    asteroidsToRemove.add(asteroid);
                    bulletsToRemove.add(bullet);
                    destroyedAsteroids++;
                    score += 10;
                    break;  // Only one bullet can destroy an asteroid
                }
            }
        }

        // Remove destroyed asteroids and bullets
        asteroids.removeAll(asteroidsToRemove);
        bullets.removeAll(bulletsToRemove);

        // Remove asteroids that are off the screen
        asteroids.removeIf(asteroid -> asteroid.y > HEIGHT);

        // Level up condition
        if (destroyedAsteroids >= 5) {
            level++;
            destroyedAsteroids = 0;
            levelUpDisplay = true;
            levelUpTime = System.currentTimeMillis();
            increaseAsteroidSpeed();
        }
    }

    private void createAsteroid() {
        int x = (int) (Math.random() * (WIDTH - 40));
        // Use the current level to set the speed for new asteroids
        int speed = 2 + level - 1; // Speed increases as level increases
        asteroids.add(new Asteroid(x, 0, speed));
    }

    private void increaseAsteroidSpeed() {
        int speedIncrement = 1;
        for (Asteroid asteroid : asteroids) {
            asteroid.increaseSpeed(speedIncrement);
        }
    }

    private void updateHighScore() {
        if (score > highScore) {
            highScore = score;
        }
    }

    private void restartGame() {
        spaceship = new Spaceship(WIDTH / 2 - 25, HEIGHT - 50);
        bullets.clear();
        asteroids.clear();
        gameOver = false;
        score = 0;
        level = 1;
        destroyedAsteroids = 0;
        gameTimer.start();
    }

    @Override
    public void paint(Graphics g) {
        super.paint(g);
        Graphics2D g2d = (Graphics2D) g;

        g2d.setColor(Color.BLACK);
        g2d.fillRect(0, 0, WIDTH, HEIGHT);

        spaceship.draw(g2d);

        for (Bullet bullet : bullets) {
            bullet.draw(g2d);
        }

        for (Asteroid asteroid : asteroids) {
            asteroid.draw(g2d);
        }

        g2d.setColor(Color.RED);
        g2d.setFont(new Font("Arial", Font.BOLD, 20));
        g2d.drawString("Score: " + score, 10, 90);
        g2d.drawString("Level: " + level, WIDTH - 100, 30);
        g2d.drawString("High Score: " + highScore, 10, 60);

        if (levelUpDisplay) {
            g2d.setColor(Color.YELLOW);
            g2d.setFont(new Font("Arial", Font.BOLD, 50));
            g2d.drawString("LEVEL " + level, WIDTH / 2 - 100, HEIGHT / 2);
        }

        if (gameOver) {
            g2d.setColor(Color.YELLOW);
            g2d.setFont(new Font("Arial", Font.BOLD, 50));
            g2d.drawString("GAME OVER!", WIDTH / 2 - 150, HEIGHT / 2);
            g2d.setFont(new Font("Arial", Font.BOLD, 30));
            g2d.drawString("Press ENTER to play again", WIDTH / 2 - 175, HEIGHT / 2 + 50);
        }
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(() -> {
            SpaceShooterGame game = new SpaceShooterGame();
            game.setVisible(true);
        });
    }
}
