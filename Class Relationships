/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 */

package com.mycompany.classrelationships;

/**
 *
 * @author sashkar2025
 */
import java.util.ArrayList;
import java.util.Collections;

// Priority Interface
interface Priority {
    void setPriority(int priority);
    int getPriority();
}

// Complexity Interface
interface Complexity {
    void setComplexity(int complexity);
    int getComplexity();
}

// Task Class implements Priority, Complexity, and Comparable
class Task implements Priority, Complexity, Comparable<Task> {
    private int priority;
    private int complexity;
    private String description;

    // Constructor to initialize task description, priority, and complexity
    public Task(String description, int priority, int complexity) {
        this.description = description;
        setPriority(priority);
        setComplexity(complexity);
    }

    // Implementing Priority interface methods
    @Override
    public void setPriority(int priority) {
        this.priority = priority;
    }

    @Override
    public int getPriority() {
        return this.priority;
    }

    // Implementing Complexity interface methods
    @Override
    public void setComplexity(int complexity) {
        this.complexity = complexity;
    }

    @Override
    public int getComplexity() {
        return this.complexity;
    }

    // Implementing Comparable interface method to compare tasks by priority, then complexity
    @Override
    public int compareTo(Task other) {
        if (this.priority != other.priority) {
            return Integer.compare(this.priority, other.priority);
        } else {
            return Integer.compare(this.complexity, other.complexity);
        }
    }

    @Override
    public String toString() {
        return "Task: " + description + ", Priority: " + priority + ", Complexity: " + complexity;
    }
}

// Main class with the driver method
public class ClassRelationships{
    public static void main(String[] args) {
        // Create a list of tasks with varying priorities and complexities
        ArrayList<Task> tasks = new ArrayList<>();
        tasks.add(new Task("Task 1", 5, 3));
        tasks.add(new Task("Task 2", 3, 2));
        tasks.add(new Task("Task 3", 5, 2));
        tasks.add(new Task("Task 4", 2, 4));
        tasks.add(new Task("Task 5", 3, 5));

        // Sort tasks by priority, then by complexity
        Collections.sort(tasks);

        // Display the sorted tasks
        System.out.println("Sorted tasks by priority and complexity:");
        for (Task task : tasks) {
            System.out.println(task);
        }
    }
}
